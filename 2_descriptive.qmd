```{r echo = FALSE, include=FALSE}
library(tidyverse)
library(survey)
library(haven)
library(xtable)

here::i_am("2_descriptive.qmd")
options(box.path = here::here())
box::use(./functions)
box::reload(functions)
options(survey.lonely.psu="adjust")

df_intensive <- readRDS("data/df_intensive.rds")
df_extensive <- readRDS("data/df_extensive.rds")
```



# Pre-treatment characteristics

```{r}
balance_ex <- df_extensive  |> 
  filter(year <= 2009) |> 
  summarise(
    `Employment` = mean(employment)*100, 
    `Unemployment` = mean(employment)*100, 
    `Contract` = mean(contract)*100,
    Age = mean(age), 
    # age_SD = sd(age),
    # Experience = mean(experience),
    # Experience_SD = sd(experience),
    prop_educ = list(prop.table(table(educ))*100),
    prop_civilstatus = list(prop.table(table(civilstatus))*100),
    # prop_region = list(prop.table(table(region))),
    prop_urb = list(prop.table(table(urb))*100), 
    nob = n(), 
    .by = c(eligible)
  ) |>
  unnest_wider(prop_educ, names_sep = "_") |>
  unnest_wider(prop_civilstatus, names_sep = "_") |>
  unnest_wider(prop_urb, names_sep = "_") |> 
  mutate(Category = "Extensive", .before = everything())

balance_in <- df_intensive  |> 
  filter(year <= 2009) |> 
  summarise(
    `Employment` = mean(employment)*100, 
    `Unemployment` = mean(employment)*100, 
    `Contract` = mean(contract)*100,
    `Log of Job Income` = mean(log_jobincome), 
    `Log of Total Income` = mean(log_totalincome), 
    `Working Hours` = mean(log_hours), 
    Age = mean(age), 
    # age_SD = sd(age),
    # Experience = mean(experience),
    # Experience_SD = sd(experience),
    prop_educ = list(prop.table(table(educ))*100),
    prop_civilstatus = list(prop.table(table(civilstatus))*100),
    # prop_region = list(prop.table(table(region))),
    prop_urb = list(prop.table(table(urb))*100), 
    nob = n(),
    .by = c(eligible)
  ) |>
  unnest_wider(col = c(prop_educ, prop_civilstatus, prop_urb), names_sep = "_") |> 
  mutate(Category = "Intensive", .before = everything())

balance <- bind_rows(balance_ex, balance_in) |> 
  mutate(
    eligible = if_else(eligible == 1, "Eligible", "Non-eligible") 
  ) |> 
  arrange(Category, eligible)

# Transpose the combined_balance dataframe
transposed_balance <- balance |>
  # column_to_rownames(var = "eligible") |> # Use 'eligible' as row names
  t() |> # Transpose the dataframe
  as.data.frame() |>
  rownames_to_column(var = "Variable")

# Print the transposed dataframe to check
print(transposed_balance)

# Generate LaTeX table
latex_table <- xtable(transposed_balance, caption = "Pre-treatment Characteristics", digits = c(0,2,2,2,2,2))

# Print LaTeX table to console
# print(latex_table, type = "latex", include.rownames = FALSE, caption.placement = "top")
```

# Changes

```{r}
balance_ex <- df_extensive  |> 
  filter(year %in% c(2006, 2011)) |> 
  summarise(
    `Employment` = mean(employment)*100, 
    `Unemployment` = mean(employment)*100, 
    Contract = mean(contract)*100,
    Age = mean(age), 
    prop_educ = list(prop.table(table(educ))*100),
    prop_civilstatus = list(prop.table(table(civilstatus))*100),
    # prop_region = list(prop.table(table(region))),
    prop_urb = list(prop.table(table(urb))*100), 
    .by = c(eligible, year)
  ) |> 
  arrange(eligible, year) |>
  select(-year) |> 
  unnest_wider(prop_educ, names_sep = "_") |>
  unnest_wider(prop_civilstatus, names_sep = "_") |>
  unnest_wider(prop_urb, names_sep = "_") 

balance_ex <- balance_ex |> 
  mutate(
    across(
      .fns = ~ as.numeric(as.character(.x)),
      .cols = everything()
    )
  )

balance_ex <- bind_rows(
  balance_ex[2, ] - balance_ex[1, ],
  balance_ex[4, ] - balance_ex[3, ] 
) |> 
  mutate(Category = "Extensive", eligible = c(0, 1), .before = everything()) 

  
balance_in <- df_intensive  |> 
  filter(year %in% c(2006, 2011)) |> 
  summarise(
    Contract = mean(contract)*100,
    `Log of Job Income` = mean(log_jobincome), 
    `Log of Total Income` = mean(log_totalincome), 
    `Working Hours` = mean(log_hours), 
    Age = mean(age), 
    prop_educ = list(prop.table(table(educ))*100),
    prop_civilstatus = list(prop.table(table(civilstatus))*100),
    # prop_region = list(prop.table(table(region))),
    prop_urb = list(prop.table(table(urb))*100), 
    nob = n(),
    .by = c(eligible, year)
  ) |>
  arrange(eligible, year) |>
  select(-year) |> 
  unnest_wider(col = c(prop_educ, prop_civilstatus, prop_urb), names_sep = "_") |> 
  mutate(Category = "Intensive", .before = everything())

balance_in <- balance_in |> 
  mutate(
    across(
      .fns = ~ as.numeric(as.character(.x)),
      .cols = everything()
    )
  )

balance_in <- bind_rows(
  balance_in[2, ] - balance_in[1, ],
  balance_in[4, ] - balance_in[3, ]
) |> 
  mutate(Category = "Intensive", eligible = c(0, 1), .before = everything()) 
  

balance <- bind_rows(balance_ex, balance_in) |> 
  mutate(
    eligible = if_else(eligible == 1, "Eligible", "Non-eligible") 
  ) |> 
  arrange(Category, eligible)

# Transpose the combined_balance dataframe
transposed_balance <- balance |>
  # column_to_rownames(var = "eligible") |> # Use 'eligible' as row names
  t() |> # Transpose the dataframe
  as.data.frame() |>
  rownames_to_column(var = "Variable")

# Print the transposed dataframe to check
print(transposed_balance)

# Generate LaTeX table
latex_table <- xtable(transposed_balance, caption = "Pre-treatment Characteristics", digits = c(0,2,2,2,2,2))

# Print LaTeX table to console
# print(latex_table, type = "latex", include.rownames = FALSE, caption.placement = "top")
```





# Those who took SEJ

```{r echo=FALSE}
takeups <- df_extensive |> filter(subsidio_joven == 1)
takeups_design <- svydesign(
  id = ~varunit, 
  strata = ~varstrat, 
  weights = ~expr, 
  data = takeups, 
  nest = TRUE, 
)

svytable(~decil, design = takeups_design) |> prop.table() * 100
svytable(~age, design = takeups_design)  |> prop.table() * 100
svytable(~year, design = takeups_design) |> prop.table() * 100
svytable(~educ, design = takeups_design) |> prop.table() * 100
svytable(~urb, design = takeups_design) |> prop.table() * 100
svytable(~civilstatus, design = takeups_design) |> prop.table() * 100
svytable(~region, design = takeups_design) |> prop.table() * 100
```

```{r echo=FALSE}

df_takeup <- df_intensive |> 
  filter(subsidio_joven == 1)

intensive_design <- svydesign(
  id = ~varunit, 
  strata = ~varstrat, 
  weights = ~expr, 
  data = df_intensive, 
  nest = TRUE
)

extensive_design <- svydesign(
  id = ~varunit, 
  strata = ~varstrat, 
  weights = ~expr, 
  data = df_extensive, 
  nest = TRUE,
)

takeup_design <- svydesign(
  id = ~varunit, 
  strata = ~varstrat, 
  weights = ~expr, 
  data = df_takeup, 
  nest = TRUE,
)

# Extract tables
takeup_table <- svytable(~region + year, design = takeup_design)
intensive_table <- svytable(~region + year, design = intensive_design)

# Subset intensive_table to match the years in takeup_table
intensive_table_subset <- intensive_table[, colnames(takeup_table)]
takeup_table / intensive_table_subset
```

```{r}
balance_takeups <- takeups  |> 
  summarise(
    prop_age = list(prop.table(table(age))*100), 
    prop_educ = list(prop.table(table(educ))*100),
    prop_civilstatus = list(prop.table(table(civilstatus))*100),
    # prop_region = list(prop.table(table(region))),
    prop_urb = list(prop.table(table(urb))*100)
  ) |> 
  unnest_wider(col = c(prop_age, prop_educ, prop_civilstatus, prop_urb), names_sep = "_")
```

